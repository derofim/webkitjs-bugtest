/*
    This file is part of the WebKit open source project.
    This file has been generated by generate-bindings.pl. DO NOT MODIFY!

    This library is free software; you can redistribute it and/or
    modify it under the terms of the GNU Library General Public
    License as published by the Free Software Foundation; either
    version 2 of the License, or (at your option) any later version.

    This library is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
    Library General Public License for more details.

    You should have received a copy of the GNU Library General Public License
    along with this library; see the file COPYING.LIB.  If not, write to
    the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor,
    Boston, MA 02110-1301, USA.
*/

#include "config.h"
#include "JSDOMWindow.h"

#include "BarProp.h"
#include "CSSRuleList.h"
#include "CSSStyleDeclaration.h"
#include "Console.h"
#include "Crypto.h"
#include "DOMSelection.h"
#include "DOMWindow.h"
#include "Document.h"
#include "Element.h"
#include "Event.h"
#include "EventListener.h"
#include "ExceptionCode.h"
#include "History.h"
#include "JSBarProp.h"
#include "JSCSSRuleList.h"
#include "JSCSSStyleDeclaration.h"
#include "JSConsole.h"
#include "JSCrypto.h"
#include "JSDOMBinding.h"
#include "JSDOMSelection.h"
#include "JSDOMWindow.h"
#include "JSDOMWindowShell.h"
#include "JSDocument.h"
#include "JSElement.h"
#include "JSErrorHandler.h"
#include "JSEvent.h"
#include "JSEventListener.h"
#include "JSHistory.h"
#include "JSLocation.h"
#include "JSMediaQueryList.h"
#include "JSMutationObserver.h"
#include "JSNavigator.h"
#include "JSNode.h"
#include "JSRequestAnimationFrameCallback.h"
#include "JSScreen.h"
#include "JSStyleMedia.h"
#include "JSWebKitPoint.h"
#include "Location.h"
#include "MediaQueryList.h"
#include "Navigator.h"
#include "Screen.h"
#include "StyleMedia.h"
#include "StyleProperties.h"
#include "URL.h"
#include "WebKitPoint.h"
#include <runtime/Error.h>
#include <runtime/JSString.h>
#include <wtf/GetPtr.h>

#if ENABLE(BLOB)
#include "JSDOMURL.h"
#endif

#if ENABLE(CSS3_CONDITIONAL_RULES)
#include "DOMWindowCSS.h"
#include "JSDOMWindowCSS.h"
#endif

#if ENABLE(INDEXED_DATABASE)
#include "JSIDBCursor.h"
#include "JSIDBDatabase.h"
#include "JSIDBFactory.h"
#include "JSIDBIndex.h"
#include "JSIDBKeyRange.h"
#include "JSIDBObjectStore.h"
#include "JSIDBRequest.h"
#include "JSIDBTransaction.h"
#endif

#if ENABLE(IOS_TOUCH_EVENTS)
#include "JSTouch.h"
#include "JSTouchList.h"
#endif

using namespace JSC;

namespace WebCore {

/* Hash table */

static const HashTableValue JSDOMWindowTableValues[] =
{
    { "screen", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowScreen), (intptr_t)setJSDOMWindowScreen },
    { "history", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowHistory), (intptr_t)setJSDOMWindowHistory },
    { "locationbar", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowLocationbar), (intptr_t)setJSDOMWindowLocationbar },
    { "menubar", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowMenubar), (intptr_t)setJSDOMWindowMenubar },
    { "personalbar", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowPersonalbar), (intptr_t)setJSDOMWindowPersonalbar },
    { "scrollbars", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowScrollbars), (intptr_t)setJSDOMWindowScrollbars },
    { "statusbar", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowStatusbar), (intptr_t)setJSDOMWindowStatusbar },
    { "toolbar", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowToolbar), (intptr_t)setJSDOMWindowToolbar },
    { "navigator", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowNavigator), (intptr_t)setJSDOMWindowNavigator },
    { "clientInformation", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowClientInformation), (intptr_t)setJSDOMWindowClientInformation },
    { "crypto", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowCrypto), (intptr_t)0 },
    { "location", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowLocation), (intptr_t)setJSDOMWindowLocation },
    { "event", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowEvent), (intptr_t)setJSDOMWindowEvent },
    { "frameElement", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowFrameElement), (intptr_t)0 },
    { "offscreenBuffering", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOffscreenBuffering), (intptr_t)setJSDOMWindowOffscreenBuffering },
    { "outerHeight", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOuterHeight), (intptr_t)setJSDOMWindowOuterHeight },
    { "outerWidth", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOuterWidth), (intptr_t)setJSDOMWindowOuterWidth },
    { "innerHeight", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowInnerHeight), (intptr_t)setJSDOMWindowInnerHeight },
    { "innerWidth", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowInnerWidth), (intptr_t)setJSDOMWindowInnerWidth },
    { "screenX", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowScreenX), (intptr_t)setJSDOMWindowScreenX },
    { "screenY", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowScreenY), (intptr_t)setJSDOMWindowScreenY },
    { "screenLeft", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowScreenLeft), (intptr_t)setJSDOMWindowScreenLeft },
    { "screenTop", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowScreenTop), (intptr_t)setJSDOMWindowScreenTop },
    { "scrollX", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowScrollX), (intptr_t)setJSDOMWindowScrollX },
    { "scrollY", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowScrollY), (intptr_t)setJSDOMWindowScrollY },
    { "pageXOffset", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowPageXOffset), (intptr_t)0 },
    { "pageYOffset", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowPageYOffset), (intptr_t)0 },
    { "closed", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowClosed), (intptr_t)0 },
    { "length", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowLength), (intptr_t)setJSDOMWindowLength },
    { "name", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowName), (intptr_t)setJSDOMWindowName },
    { "status", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowStatus), (intptr_t)setJSDOMWindowStatus },
    { "defaultStatus", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowDefaultStatus), (intptr_t)setJSDOMWindowDefaultStatus },
    { "defaultstatus", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowDefaultstatus), (intptr_t)setJSDOMWindowDefaultstatus },
    { "self", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowSelf), (intptr_t)setJSDOMWindowSelf },
    { "window", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowWindow), (intptr_t)0 },
    { "frames", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowFrames), (intptr_t)setJSDOMWindowFrames },
    { "opener", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOpener), (intptr_t)setJSDOMWindowOpener },
    { "parent", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowParent), (intptr_t)setJSDOMWindowParent },
    { "top", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowTop), (intptr_t)0 },
    { "document", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowDocument), (intptr_t)0 },
    { "styleMedia", DontDelete | ReadOnly, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowStyleMedia), (intptr_t)0 },
    { "devicePixelRatio", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowDevicePixelRatio), (intptr_t)setJSDOMWindowDevicePixelRatio },
    { "console", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowConsole), (intptr_t)setJSDOMWindowConsole },
#if ENABLE(CSS3_CONDITIONAL_RULES)
    { "CSS", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowCSS), (intptr_t)setJSDOMWindowCSS },
#endif
    { "onabort", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnabort), (intptr_t)setJSDOMWindowOnabort },
    { "onbeforeunload", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnbeforeunload), (intptr_t)setJSDOMWindowOnbeforeunload },
    { "onblur", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnblur), (intptr_t)setJSDOMWindowOnblur },
    { "oncanplay", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOncanplay), (intptr_t)setJSDOMWindowOncanplay },
    { "oncanplaythrough", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOncanplaythrough), (intptr_t)setJSDOMWindowOncanplaythrough },
    { "onchange", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnchange), (intptr_t)setJSDOMWindowOnchange },
    { "onclick", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnclick), (intptr_t)setJSDOMWindowOnclick },
    { "oncontextmenu", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOncontextmenu), (intptr_t)setJSDOMWindowOncontextmenu },
    { "ondblclick", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOndblclick), (intptr_t)setJSDOMWindowOndblclick },
    { "ondrag", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOndrag), (intptr_t)setJSDOMWindowOndrag },
    { "ondragend", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOndragend), (intptr_t)setJSDOMWindowOndragend },
    { "ondragenter", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOndragenter), (intptr_t)setJSDOMWindowOndragenter },
    { "ondragleave", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOndragleave), (intptr_t)setJSDOMWindowOndragleave },
    { "ondragover", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOndragover), (intptr_t)setJSDOMWindowOndragover },
    { "ondragstart", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOndragstart), (intptr_t)setJSDOMWindowOndragstart },
    { "ondrop", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOndrop), (intptr_t)setJSDOMWindowOndrop },
    { "ondurationchange", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOndurationchange), (intptr_t)setJSDOMWindowOndurationchange },
    { "onemptied", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnemptied), (intptr_t)setJSDOMWindowOnemptied },
    { "onended", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnended), (intptr_t)setJSDOMWindowOnended },
    { "onerror", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnerror), (intptr_t)setJSDOMWindowOnerror },
    { "onfocus", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnfocus), (intptr_t)setJSDOMWindowOnfocus },
    { "onhashchange", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnhashchange), (intptr_t)setJSDOMWindowOnhashchange },
    { "oninput", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOninput), (intptr_t)setJSDOMWindowOninput },
    { "oninvalid", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOninvalid), (intptr_t)setJSDOMWindowOninvalid },
    { "onkeydown", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnkeydown), (intptr_t)setJSDOMWindowOnkeydown },
    { "onkeypress", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnkeypress), (intptr_t)setJSDOMWindowOnkeypress },
    { "onkeyup", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnkeyup), (intptr_t)setJSDOMWindowOnkeyup },
    { "onload", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnload), (intptr_t)setJSDOMWindowOnload },
    { "onloadeddata", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnloadeddata), (intptr_t)setJSDOMWindowOnloadeddata },
    { "onloadedmetadata", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnloadedmetadata), (intptr_t)setJSDOMWindowOnloadedmetadata },
    { "onloadstart", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnloadstart), (intptr_t)setJSDOMWindowOnloadstart },
    { "onmessage", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnmessage), (intptr_t)setJSDOMWindowOnmessage },
    { "onmousedown", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnmousedown), (intptr_t)setJSDOMWindowOnmousedown },
    { "onmouseenter", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnmouseenter), (intptr_t)setJSDOMWindowOnmouseenter },
    { "onmouseleave", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnmouseleave), (intptr_t)setJSDOMWindowOnmouseleave },
    { "onmousemove", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnmousemove), (intptr_t)setJSDOMWindowOnmousemove },
    { "onmouseout", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnmouseout), (intptr_t)setJSDOMWindowOnmouseout },
    { "onmouseover", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnmouseover), (intptr_t)setJSDOMWindowOnmouseover },
    { "onmouseup", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnmouseup), (intptr_t)setJSDOMWindowOnmouseup },
    { "onmousewheel", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnmousewheel), (intptr_t)setJSDOMWindowOnmousewheel },
    { "onoffline", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnoffline), (intptr_t)setJSDOMWindowOnoffline },
    { "ononline", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnonline), (intptr_t)setJSDOMWindowOnonline },
    { "onpagehide", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnpagehide), (intptr_t)setJSDOMWindowOnpagehide },
    { "onpageshow", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnpageshow), (intptr_t)setJSDOMWindowOnpageshow },
    { "onpause", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnpause), (intptr_t)setJSDOMWindowOnpause },
    { "onplay", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnplay), (intptr_t)setJSDOMWindowOnplay },
    { "onplaying", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnplaying), (intptr_t)setJSDOMWindowOnplaying },
    { "onpopstate", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnpopstate), (intptr_t)setJSDOMWindowOnpopstate },
    { "onprogress", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnprogress), (intptr_t)setJSDOMWindowOnprogress },
    { "onratechange", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnratechange), (intptr_t)setJSDOMWindowOnratechange },
    { "onresize", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnresize), (intptr_t)setJSDOMWindowOnresize },
    { "onscroll", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnscroll), (intptr_t)setJSDOMWindowOnscroll },
    { "onseeked", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnseeked), (intptr_t)setJSDOMWindowOnseeked },
    { "onseeking", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnseeking), (intptr_t)setJSDOMWindowOnseeking },
    { "onselect", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnselect), (intptr_t)setJSDOMWindowOnselect },
    { "onstalled", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnstalled), (intptr_t)setJSDOMWindowOnstalled },
    { "onstorage", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnstorage), (intptr_t)setJSDOMWindowOnstorage },
    { "onsubmit", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnsubmit), (intptr_t)setJSDOMWindowOnsubmit },
    { "onsuspend", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnsuspend), (intptr_t)setJSDOMWindowOnsuspend },
    { "ontimeupdate", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOntimeupdate), (intptr_t)setJSDOMWindowOntimeupdate },
    { "onunload", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnunload), (intptr_t)setJSDOMWindowOnunload },
    { "onvolumechange", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnvolumechange), (intptr_t)setJSDOMWindowOnvolumechange },
    { "onwaiting", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnwaiting), (intptr_t)setJSDOMWindowOnwaiting },
    { "onwheel", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnwheel), (intptr_t)setJSDOMWindowOnwheel },
    { "onreset", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnreset), (intptr_t)setJSDOMWindowOnreset },
    { "onsearch", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnsearch), (intptr_t)setJSDOMWindowOnsearch },
    { "onwebkitanimationend", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnwebkitanimationend), (intptr_t)setJSDOMWindowOnwebkitanimationend },
    { "onwebkitanimationiteration", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnwebkitanimationiteration), (intptr_t)setJSDOMWindowOnwebkitanimationiteration },
    { "onwebkitanimationstart", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnwebkitanimationstart), (intptr_t)setJSDOMWindowOnwebkitanimationstart },
    { "onwebkittransitionend", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnwebkittransitionend), (intptr_t)setJSDOMWindowOnwebkittransitionend },
    { "ontransitionend", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOntransitionend), (intptr_t)setJSDOMWindowOntransitionend },
#if ENABLE(TOUCH_EVENTS)
    { "ontouchstart", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOntouchstart), (intptr_t)setJSDOMWindowOntouchstart },
#endif
#if ENABLE(TOUCH_EVENTS)
    { "ontouchmove", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOntouchmove), (intptr_t)setJSDOMWindowOntouchmove },
#endif
#if ENABLE(TOUCH_EVENTS)
    { "ontouchend", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOntouchend), (intptr_t)setJSDOMWindowOntouchend },
#endif
#if ENABLE(TOUCH_EVENTS)
    { "ontouchcancel", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOntouchcancel), (intptr_t)setJSDOMWindowOntouchcancel },
#endif
#if ENABLE(IOS_GESTURE_EVENTS)
    { "ongesturestart", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOngesturestart), (intptr_t)setJSDOMWindowOngesturestart },
#endif
#if ENABLE(IOS_GESTURE_EVENTS)
    { "ongesturechange", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOngesturechange), (intptr_t)setJSDOMWindowOngesturechange },
#endif
#if ENABLE(IOS_GESTURE_EVENTS)
    { "ongestureend", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOngestureend), (intptr_t)setJSDOMWindowOngestureend },
#endif
#if ENABLE(DEVICE_ORIENTATION)
    { "ondevicemotion", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOndevicemotion), (intptr_t)setJSDOMWindowOndevicemotion },
#endif
#if ENABLE(DEVICE_ORIENTATION)
    { "ondeviceorientation", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOndeviceorientation), (intptr_t)setJSDOMWindowOndeviceorientation },
#endif
#if ENABLE(PROXIMITY_EVENTS)
    { "onwebkitdeviceproximity", DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowOnwebkitdeviceproximity), (intptr_t)setJSDOMWindowOnwebkitdeviceproximity },
#endif
    { "Image", DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowImageConstructor), (intptr_t)setJSDOMWindowImageConstructor },
    { "XMLDocument", DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowXMLDocumentConstructor), (intptr_t)setJSDOMWindowXMLDocumentConstructor },
#if ENABLE(IOS_TOUCH_EVENTS)
    { "Touch", DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowTouchConstructor), (intptr_t)setJSDOMWindowTouchConstructor },
#endif
#if ENABLE(IOS_TOUCH_EVENTS)
    { "TouchList", DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowTouchListConstructor), (intptr_t)setJSDOMWindowTouchListConstructor },
#endif
#if ENABLE(BLOB)
    { "webkitURL", DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowWebkitURLConstructor), (intptr_t)setJSDOMWindowWebkitURLConstructor },
#endif
    { "WebKitMutationObserver", DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowWebKitMutationObserverConstructor), (intptr_t)setJSDOMWindowWebKitMutationObserverConstructor },
#if ENABLE(INDEXED_DATABASE)
    { "webkitIDBCursor", DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowWebkitIDBCursorConstructor), (intptr_t)setJSDOMWindowWebkitIDBCursorConstructor },
#endif
#if ENABLE(INDEXED_DATABASE)
    { "webkitIDBDatabase", DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowWebkitIDBDatabaseConstructor), (intptr_t)setJSDOMWindowWebkitIDBDatabaseConstructor },
#endif
#if ENABLE(INDEXED_DATABASE)
    { "webkitIDBFactory", DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowWebkitIDBFactoryConstructor), (intptr_t)setJSDOMWindowWebkitIDBFactoryConstructor },
#endif
#if ENABLE(INDEXED_DATABASE)
    { "webkitIDBIndex", DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowWebkitIDBIndexConstructor), (intptr_t)setJSDOMWindowWebkitIDBIndexConstructor },
#endif
#if ENABLE(INDEXED_DATABASE)
    { "webkitIDBKeyRange", DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowWebkitIDBKeyRangeConstructor), (intptr_t)setJSDOMWindowWebkitIDBKeyRangeConstructor },
#endif
#if ENABLE(INDEXED_DATABASE)
    { "webkitIDBObjectStore", DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowWebkitIDBObjectStoreConstructor), (intptr_t)setJSDOMWindowWebkitIDBObjectStoreConstructor },
#endif
#if ENABLE(INDEXED_DATABASE)
    { "webkitIDBRequest", DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowWebkitIDBRequestConstructor), (intptr_t)setJSDOMWindowWebkitIDBRequestConstructor },
#endif
#if ENABLE(INDEXED_DATABASE)
    { "webkitIDBTransaction", DontEnum, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowWebkitIDBTransactionConstructor), (intptr_t)setJSDOMWindowWebkitIDBTransactionConstructor },
#endif
    { "constructor", DontEnum | DontDelete, NoIntrinsic, (intptr_t)static_cast<PropertySlot::GetValueFunc>(jsDOMWindowConstructor), (intptr_t)setJSDOMWindowConstructor },
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSDOMWindowTable = { 533, 511, JSDOMWindowTableValues, 0 };
/* Hash table for constructor */

static const HashTableValue JSDOMWindowConstructorTableValues[] =
{
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSDOMWindowConstructorTable = { 1, 0, JSDOMWindowConstructorTableValues, 0 };
const ClassInfo JSDOMWindowConstructor::s_info = { "WindowConstructor", &Base::s_info, &JSDOMWindowConstructorTable, 0, CREATE_METHOD_TABLE(JSDOMWindowConstructor) };

JSDOMWindowConstructor::JSDOMWindowConstructor(Structure* structure, JSDOMGlobalObject* globalObject)
    : DOMConstructorObject(structure, globalObject)
{
}

void JSDOMWindowConstructor::finishCreation(VM& vm, JSDOMGlobalObject* globalObject)
{
    Base::finishCreation(vm);
    ASSERT(inherits(info()));
    putDirect(vm, vm.propertyNames->prototype, globalObject->prototype(), DontDelete | ReadOnly);
    putDirect(vm, vm.propertyNames->length, jsNumber(0), ReadOnly | DontDelete | DontEnum);
}

bool JSDOMWindowConstructor::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    return getStaticValueSlot<JSDOMWindowConstructor, JSDOMWrapper>(exec, JSDOMWindowConstructorTable, jsCast<JSDOMWindowConstructor*>(object), propertyName, slot);
}

/* Hash table for prototype */

static const HashTableValue JSDOMWindowPrototypeTableValues[] =
{
    { "getSelection", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDOMWindowPrototypeFunctionGetSelection), (intptr_t)0 },
    { "focus", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDOMWindowPrototypeFunctionFocus), (intptr_t)0 },
    { "blur", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDOMWindowPrototypeFunctionBlur), (intptr_t)0 },
    { "close", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDOMWindowPrototypeFunctionClose), (intptr_t)0 },
    { "print", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDOMWindowPrototypeFunctionPrint), (intptr_t)0 },
    { "stop", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDOMWindowPrototypeFunctionStop), (intptr_t)0 },
    { "open", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDOMWindowPrototypeFunctionOpen), (intptr_t)2 },
    { "showModalDialog", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDOMWindowPrototypeFunctionShowModalDialog), (intptr_t)1 },
    { "alert", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDOMWindowPrototypeFunctionAlert), (intptr_t)0 },
    { "confirm", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDOMWindowPrototypeFunctionConfirm), (intptr_t)0 },
    { "prompt", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDOMWindowPrototypeFunctionPrompt), (intptr_t)0 },
    { "find", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDOMWindowPrototypeFunctionFind), (intptr_t)0 },
    { "scrollBy", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDOMWindowPrototypeFunctionScrollBy), (intptr_t)0 },
    { "scrollTo", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDOMWindowPrototypeFunctionScrollTo), (intptr_t)0 },
    { "scroll", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDOMWindowPrototypeFunctionScroll), (intptr_t)0 },
    { "moveBy", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDOMWindowPrototypeFunctionMoveBy), (intptr_t)0 },
    { "moveTo", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDOMWindowPrototypeFunctionMoveTo), (intptr_t)0 },
    { "resizeBy", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDOMWindowPrototypeFunctionResizeBy), (intptr_t)0 },
    { "resizeTo", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDOMWindowPrototypeFunctionResizeTo), (intptr_t)0 },
    { "matchMedia", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDOMWindowPrototypeFunctionMatchMedia), (intptr_t)1 },
    { "getComputedStyle", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDOMWindowPrototypeFunctionGetComputedStyle), (intptr_t)0 },
    { "getMatchedCSSRules", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDOMWindowPrototypeFunctionGetMatchedCSSRules), (intptr_t)0 },
    { "webkitConvertPointFromPageToNode", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDOMWindowPrototypeFunctionWebkitConvertPointFromPageToNode), (intptr_t)0 },
    { "webkitConvertPointFromNodeToPage", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDOMWindowPrototypeFunctionWebkitConvertPointFromNodeToPage), (intptr_t)0 },
    { "postMessage", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDOMWindowPrototypeFunctionPostMessage), (intptr_t)2 },
    { "requestAnimationFrame", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDOMWindowPrototypeFunctionRequestAnimationFrame), (intptr_t)1 },
    { "cancelAnimationFrame", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDOMWindowPrototypeFunctionCancelAnimationFrame), (intptr_t)1 },
    { "webkitRequestAnimationFrame", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDOMWindowPrototypeFunctionWebkitRequestAnimationFrame), (intptr_t)1 },
    { "webkitCancelAnimationFrame", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDOMWindowPrototypeFunctionWebkitCancelAnimationFrame), (intptr_t)1 },
    { "webkitCancelRequestAnimationFrame", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDOMWindowPrototypeFunctionWebkitCancelRequestAnimationFrame), (intptr_t)1 },
    { "addEventListener", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDOMWindowPrototypeFunctionAddEventListener), (intptr_t)2 },
    { "removeEventListener", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDOMWindowPrototypeFunctionRemoveEventListener), (intptr_t)2 },
    { "dispatchEvent", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDOMWindowPrototypeFunctionDispatchEvent), (intptr_t)1 },
    { "captureEvents", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDOMWindowPrototypeFunctionCaptureEvents), (intptr_t)0 },
    { "releaseEvents", JSC::Function, NoIntrinsic, (intptr_t)static_cast<NativeFunction>(jsDOMWindowPrototypeFunctionReleaseEvents), (intptr_t)0 },
    { 0, 0, NoIntrinsic, 0, 0 }
};

static const HashTable JSDOMWindowPrototypeTable = { 135, 127, JSDOMWindowPrototypeTableValues, 0 };
const ClassInfo JSDOMWindowPrototype::s_info = { "WindowPrototype", &Base::s_info, &JSDOMWindowPrototypeTable, 0, CREATE_METHOD_TABLE(JSDOMWindowPrototype) };

bool JSDOMWindowPrototype::getOwnPropertySlot(JSObject* object, ExecState* exec, PropertyName propertyName, PropertySlot& slot)
{
    JSDOMWindowPrototype* thisObject = jsCast<JSDOMWindowPrototype*>(object);
    return getStaticFunctionSlot<JSObject>(exec, JSDOMWindowPrototypeTable, thisObject, propertyName, slot);
}

const ClassInfo JSDOMWindow::s_info = { "Window", &Base::s_info, &JSDOMWindowTable, 0 , CREATE_METHOD_TABLE(JSDOMWindow) };

JSDOMWindow::JSDOMWindow(VM& vm, Structure* structure, PassRefPtr<DOMWindow> impl, JSDOMWindowShell* shell)
    : JSDOMWindowBase(vm, structure, impl, shell)
{
}

EncodedJSValue jsDOMWindowScreen(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.screen()));
    return JSValue::encode(result);
}


EncodedJSValue jsDOMWindowHistory(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.history()));
    return JSValue::encode(result);
}


EncodedJSValue jsDOMWindowLocationbar(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.locationbar()));
    return JSValue::encode(result);
}


EncodedJSValue jsDOMWindowMenubar(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.menubar()));
    return JSValue::encode(result);
}


EncodedJSValue jsDOMWindowPersonalbar(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.personalbar()));
    return JSValue::encode(result);
}


EncodedJSValue jsDOMWindowScrollbars(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.scrollbars()));
    return JSValue::encode(result);
}


EncodedJSValue jsDOMWindowStatusbar(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.statusbar()));
    return JSValue::encode(result);
}


EncodedJSValue jsDOMWindowToolbar(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.toolbar()));
    return JSValue::encode(result);
}


EncodedJSValue jsDOMWindowNavigator(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.navigator()));
    return JSValue::encode(result);
}


EncodedJSValue jsDOMWindowClientInformation(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.clientInformation()));
    return JSValue::encode(result);
}


EncodedJSValue jsDOMWindowCrypto(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.crypto()));
    return JSValue::encode(result);
}


EncodedJSValue jsDOMWindowLocation(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.location()));
    return JSValue::encode(result);
}


EncodedJSValue jsDOMWindowEvent(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    return JSValue::encode(castedThis->event(exec));
}


EncodedJSValue jsDOMWindowFrameElement(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    DOMWindow& impl = castedThis->impl();
    return JSValue::encode(shouldAllowAccessToNode(exec, impl.frameElement()) ? toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.frameElement())) : jsNull());
}


EncodedJSValue jsDOMWindowOffscreenBuffering(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    JSValue result = jsBoolean(impl.offscreenBuffering());
    return JSValue::encode(result);
}


EncodedJSValue jsDOMWindowOuterHeight(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    JSValue result = jsNumber(impl.outerHeight());
    return JSValue::encode(result);
}


EncodedJSValue jsDOMWindowOuterWidth(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    JSValue result = jsNumber(impl.outerWidth());
    return JSValue::encode(result);
}


EncodedJSValue jsDOMWindowInnerHeight(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    JSValue result = jsNumber(impl.innerHeight());
    return JSValue::encode(result);
}


EncodedJSValue jsDOMWindowInnerWidth(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    JSValue result = jsNumber(impl.innerWidth());
    return JSValue::encode(result);
}


EncodedJSValue jsDOMWindowScreenX(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    JSValue result = jsNumber(impl.screenX());
    return JSValue::encode(result);
}


EncodedJSValue jsDOMWindowScreenY(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    JSValue result = jsNumber(impl.screenY());
    return JSValue::encode(result);
}


EncodedJSValue jsDOMWindowScreenLeft(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    JSValue result = jsNumber(impl.screenLeft());
    return JSValue::encode(result);
}


EncodedJSValue jsDOMWindowScreenTop(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    JSValue result = jsNumber(impl.screenTop());
    return JSValue::encode(result);
}


EncodedJSValue jsDOMWindowScrollX(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    JSValue result = jsNumber(impl.scrollX());
    return JSValue::encode(result);
}


EncodedJSValue jsDOMWindowScrollY(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    JSValue result = jsNumber(impl.scrollY());
    return JSValue::encode(result);
}


EncodedJSValue jsDOMWindowPageXOffset(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    JSValue result = jsNumber(impl.pageXOffset());
    return JSValue::encode(result);
}


EncodedJSValue jsDOMWindowPageYOffset(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    JSValue result = jsNumber(impl.pageYOffset());
    return JSValue::encode(result);
}


EncodedJSValue jsDOMWindowClosed(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    JSValue result = jsBoolean(impl.closed());
    return JSValue::encode(result);
}


EncodedJSValue jsDOMWindowLength(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    JSValue result = jsNumber(impl.length());
    return JSValue::encode(result);
}


EncodedJSValue jsDOMWindowName(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.name());
    return JSValue::encode(result);
}


EncodedJSValue jsDOMWindowStatus(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.status());
    return JSValue::encode(result);
}


EncodedJSValue jsDOMWindowDefaultStatus(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.defaultStatus());
    return JSValue::encode(result);
}


EncodedJSValue jsDOMWindowDefaultstatus(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    JSValue result = jsStringWithCache(exec, impl.defaultStatus());
    return JSValue::encode(result);
}


EncodedJSValue jsDOMWindowSelf(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.self()));
    return JSValue::encode(result);
}


EncodedJSValue jsDOMWindowWindow(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.window()));
    return JSValue::encode(result);
}


EncodedJSValue jsDOMWindowFrames(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.frames()));
    return JSValue::encode(result);
}


EncodedJSValue jsDOMWindowOpener(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.opener()));
    return JSValue::encode(result);
}


EncodedJSValue jsDOMWindowParent(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.parent()));
    return JSValue::encode(result);
}


EncodedJSValue jsDOMWindowTop(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.top()));
    return JSValue::encode(result);
}


EncodedJSValue jsDOMWindowDocument(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.document()));
    return JSValue::encode(result);
}


EncodedJSValue jsDOMWindowStyleMedia(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.styleMedia()));
    return JSValue::encode(result);
}


EncodedJSValue jsDOMWindowDevicePixelRatio(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    JSValue result = jsNumber(impl.devicePixelRatio());
    return JSValue::encode(result);
}


EncodedJSValue jsDOMWindowConsole(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.console()));
    return JSValue::encode(result);
}


#if ENABLE(CSS3_CONDITIONAL_RULES)
EncodedJSValue jsDOMWindowCSS(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.css()));
    return JSValue::encode(result);
}

#endif

EncodedJSValue jsDOMWindowOnabort(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.onabort()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsDOMWindowOnbeforeunload(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.onbeforeunload()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsDOMWindowOnblur(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.onblur()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsDOMWindowOncanplay(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.oncanplay()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsDOMWindowOncanplaythrough(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.oncanplaythrough()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsDOMWindowOnchange(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.onchange()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsDOMWindowOnclick(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.onclick()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsDOMWindowOncontextmenu(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.oncontextmenu()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsDOMWindowOndblclick(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.ondblclick()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsDOMWindowOndrag(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.ondrag()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsDOMWindowOndragend(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.ondragend()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsDOMWindowOndragenter(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.ondragenter()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsDOMWindowOndragleave(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.ondragleave()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsDOMWindowOndragover(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.ondragover()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsDOMWindowOndragstart(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.ondragstart()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsDOMWindowOndrop(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.ondrop()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsDOMWindowOndurationchange(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.ondurationchange()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsDOMWindowOnemptied(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.onemptied()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsDOMWindowOnended(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.onended()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsDOMWindowOnerror(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.onerror()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsDOMWindowOnfocus(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.onfocus()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsDOMWindowOnhashchange(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.onhashchange()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsDOMWindowOninput(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.oninput()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsDOMWindowOninvalid(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.oninvalid()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsDOMWindowOnkeydown(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.onkeydown()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsDOMWindowOnkeypress(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.onkeypress()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsDOMWindowOnkeyup(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.onkeyup()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsDOMWindowOnload(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.onload()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsDOMWindowOnloadeddata(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.onloadeddata()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsDOMWindowOnloadedmetadata(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.onloadedmetadata()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsDOMWindowOnloadstart(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.onloadstart()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsDOMWindowOnmessage(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.onmessage()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsDOMWindowOnmousedown(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.onmousedown()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsDOMWindowOnmouseenter(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.onmouseenter()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsDOMWindowOnmouseleave(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.onmouseleave()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsDOMWindowOnmousemove(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.onmousemove()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsDOMWindowOnmouseout(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.onmouseout()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsDOMWindowOnmouseover(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.onmouseover()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsDOMWindowOnmouseup(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.onmouseup()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsDOMWindowOnmousewheel(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.onmousewheel()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsDOMWindowOnoffline(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.onoffline()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsDOMWindowOnonline(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.ononline()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsDOMWindowOnpagehide(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.onpagehide()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsDOMWindowOnpageshow(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.onpageshow()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsDOMWindowOnpause(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.onpause()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsDOMWindowOnplay(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.onplay()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsDOMWindowOnplaying(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.onplaying()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsDOMWindowOnpopstate(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.onpopstate()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsDOMWindowOnprogress(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.onprogress()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsDOMWindowOnratechange(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.onratechange()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsDOMWindowOnresize(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.onresize()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsDOMWindowOnscroll(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.onscroll()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsDOMWindowOnseeked(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.onseeked()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsDOMWindowOnseeking(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.onseeking()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsDOMWindowOnselect(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.onselect()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsDOMWindowOnstalled(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.onstalled()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsDOMWindowOnstorage(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.onstorage()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsDOMWindowOnsubmit(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.onsubmit()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsDOMWindowOnsuspend(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.onsuspend()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsDOMWindowOntimeupdate(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.ontimeupdate()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsDOMWindowOnunload(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.onunload()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsDOMWindowOnvolumechange(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.onvolumechange()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsDOMWindowOnwaiting(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.onwaiting()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsDOMWindowOnwheel(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.onwheel()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsDOMWindowOnreset(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.onreset()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsDOMWindowOnsearch(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.onsearch()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsDOMWindowOnwebkitanimationend(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.onwebkitanimationend()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsDOMWindowOnwebkitanimationiteration(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.onwebkitanimationiteration()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsDOMWindowOnwebkitanimationstart(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.onwebkitanimationstart()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsDOMWindowOnwebkittransitionend(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.onwebkittransitionend()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


EncodedJSValue jsDOMWindowOntransitionend(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.ontransitionend()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}


#if ENABLE(TOUCH_EVENTS)
EncodedJSValue jsDOMWindowOntouchstart(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.ontouchstart()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}

#endif

#if ENABLE(TOUCH_EVENTS)
EncodedJSValue jsDOMWindowOntouchmove(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.ontouchmove()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}

#endif

#if ENABLE(TOUCH_EVENTS)
EncodedJSValue jsDOMWindowOntouchend(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.ontouchend()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}

#endif

#if ENABLE(TOUCH_EVENTS)
EncodedJSValue jsDOMWindowOntouchcancel(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.ontouchcancel()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}

#endif

#if ENABLE(IOS_GESTURE_EVENTS)
EncodedJSValue jsDOMWindowOngesturestart(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.ongesturestart()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}

#endif

#if ENABLE(IOS_GESTURE_EVENTS)
EncodedJSValue jsDOMWindowOngesturechange(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.ongesturechange()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}

#endif

#if ENABLE(IOS_GESTURE_EVENTS)
EncodedJSValue jsDOMWindowOngestureend(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.ongestureend()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}

#endif

#if ENABLE(DEVICE_ORIENTATION)
EncodedJSValue jsDOMWindowOndevicemotion(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.ondevicemotion()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}

#endif

#if ENABLE(DEVICE_ORIENTATION)
EncodedJSValue jsDOMWindowOndeviceorientation(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.ondeviceorientation()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}

#endif

#if ENABLE(PROXIMITY_EVENTS)
EncodedJSValue jsDOMWindowOnwebkitdeviceproximity(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    if (EventListener* listener = impl.onwebkitdeviceproximity()) {
        if (const JSEventListener* jsListener = JSEventListener::cast(listener)) {
            if (JSObject* jsFunction = jsListener->jsFunction(impl.scriptExecutionContext()))
                return JSValue::encode(jsFunction);
        }
    }
    return JSValue::encode(jsNull());
}

#endif

EncodedJSValue jsDOMWindowImageConstructor(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    return JSValue::encode(castedThis->image(exec));
}


EncodedJSValue jsDOMWindowXMLDocumentConstructor(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    return JSValue::encode(JSDocument::getConstructor(exec->vm(), castedThis));
}


#if ENABLE(IOS_TOUCH_EVENTS)
EncodedJSValue jsDOMWindowTouchConstructor(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    return JSValue::encode(castedThis->touch(exec));
}

#endif

#if ENABLE(IOS_TOUCH_EVENTS)
EncodedJSValue jsDOMWindowTouchListConstructor(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    return JSValue::encode(castedThis->touchList(exec));
}

#endif

#if ENABLE(BLOB)
EncodedJSValue jsDOMWindowWebkitURLConstructor(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    return JSValue::encode(JSDOMURL::getConstructor(exec->vm(), castedThis));
}

#endif

EncodedJSValue jsDOMWindowWebKitMutationObserverConstructor(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    return JSValue::encode(JSMutationObserver::getConstructor(exec->vm(), castedThis));
}


#if ENABLE(INDEXED_DATABASE)
EncodedJSValue jsDOMWindowWebkitIDBCursorConstructor(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    return JSValue::encode(JSIDBCursor::getConstructor(exec->vm(), castedThis));
}

#endif

#if ENABLE(INDEXED_DATABASE)
EncodedJSValue jsDOMWindowWebkitIDBDatabaseConstructor(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    return JSValue::encode(JSIDBDatabase::getConstructor(exec->vm(), castedThis));
}

#endif

#if ENABLE(INDEXED_DATABASE)
EncodedJSValue jsDOMWindowWebkitIDBFactoryConstructor(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    return JSValue::encode(JSIDBFactory::getConstructor(exec->vm(), castedThis));
}

#endif

#if ENABLE(INDEXED_DATABASE)
EncodedJSValue jsDOMWindowWebkitIDBIndexConstructor(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    return JSValue::encode(JSIDBIndex::getConstructor(exec->vm(), castedThis));
}

#endif

#if ENABLE(INDEXED_DATABASE)
EncodedJSValue jsDOMWindowWebkitIDBKeyRangeConstructor(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    return JSValue::encode(JSIDBKeyRange::getConstructor(exec->vm(), castedThis));
}

#endif

#if ENABLE(INDEXED_DATABASE)
EncodedJSValue jsDOMWindowWebkitIDBObjectStoreConstructor(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    return JSValue::encode(JSIDBObjectStore::getConstructor(exec->vm(), castedThis));
}

#endif

#if ENABLE(INDEXED_DATABASE)
EncodedJSValue jsDOMWindowWebkitIDBRequestConstructor(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    return JSValue::encode(JSIDBRequest::getConstructor(exec->vm(), castedThis));
}

#endif

#if ENABLE(INDEXED_DATABASE)
EncodedJSValue jsDOMWindowWebkitIDBTransactionConstructor(ExecState* exec, EncodedJSValue slotBase, EncodedJSValue thisValue, PropertyName)
{
    JSDOMWindow* castedThis = jsCast<JSDOMWindow*>(JSValue::decode(slotBase));
    UNUSED_PARAM(thisValue);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    return JSValue::encode(JSIDBTransaction::getConstructor(exec->vm(), castedThis));
}

#endif

EncodedJSValue jsDOMWindowConstructor(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue, PropertyName)
{
    JSDOMWindow* domObject = jsCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!domObject) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            domObject = shell->window();
    }
    if (!domObject)
        return throwVMTypeError(exec);
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, domObject->impl()))
        return JSValue::encode(jsUndefined());
    return JSValue::encode(JSDOMWindow::getConstructor(exec->vm(), domObject->globalObject()));
}

void setJSDOMWindowScreen(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    // Shadowing a built-in object
    castedThis->putDirect(exec->vm(), Identifier(exec, "screen"), value);
}


void setJSDOMWindowHistory(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    // Shadowing a built-in object
    castedThis->putDirect(exec->vm(), Identifier(exec, "history"), value);
}


void setJSDOMWindowLocationbar(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    // Shadowing a built-in object
    castedThis->putDirect(exec->vm(), Identifier(exec, "locationbar"), value);
}


void setJSDOMWindowMenubar(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    // Shadowing a built-in object
    castedThis->putDirect(exec->vm(), Identifier(exec, "menubar"), value);
}


void setJSDOMWindowPersonalbar(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    // Shadowing a built-in object
    castedThis->putDirect(exec->vm(), Identifier(exec, "personalbar"), value);
}


void setJSDOMWindowScrollbars(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    // Shadowing a built-in object
    castedThis->putDirect(exec->vm(), Identifier(exec, "scrollbars"), value);
}


void setJSDOMWindowStatusbar(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    // Shadowing a built-in object
    castedThis->putDirect(exec->vm(), Identifier(exec, "statusbar"), value);
}


void setJSDOMWindowToolbar(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    // Shadowing a built-in object
    castedThis->putDirect(exec->vm(), Identifier(exec, "toolbar"), value);
}


void setJSDOMWindowNavigator(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    // Shadowing a built-in object
    castedThis->putDirect(exec->vm(), Identifier(exec, "navigator"), value);
}


void setJSDOMWindowClientInformation(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    // Shadowing a built-in object
    castedThis->putDirect(exec->vm(), Identifier(exec, "clientInformation"), value);
}


void setJSDOMWindowLocation(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    castedThis->setLocation(exec, value);
}


void setJSDOMWindowEvent(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    // Shadowing a built-in object
    castedThis->putDirect(exec->vm(), Identifier(exec, "event"), value);
}


void setJSDOMWindowOffscreenBuffering(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    // Shadowing a built-in object
    castedThis->putDirect(exec->vm(), Identifier(exec, "offscreenBuffering"), value);
}


void setJSDOMWindowOuterHeight(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    // Shadowing a built-in object
    castedThis->putDirect(exec->vm(), Identifier(exec, "outerHeight"), value);
}


void setJSDOMWindowOuterWidth(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    // Shadowing a built-in object
    castedThis->putDirect(exec->vm(), Identifier(exec, "outerWidth"), value);
}


void setJSDOMWindowInnerHeight(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    // Shadowing a built-in object
    castedThis->putDirect(exec->vm(), Identifier(exec, "innerHeight"), value);
}


void setJSDOMWindowInnerWidth(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    // Shadowing a built-in object
    castedThis->putDirect(exec->vm(), Identifier(exec, "innerWidth"), value);
}


void setJSDOMWindowScreenX(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    // Shadowing a built-in object
    castedThis->putDirect(exec->vm(), Identifier(exec, "screenX"), value);
}


void setJSDOMWindowScreenY(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    // Shadowing a built-in object
    castedThis->putDirect(exec->vm(), Identifier(exec, "screenY"), value);
}


void setJSDOMWindowScreenLeft(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    // Shadowing a built-in object
    castedThis->putDirect(exec->vm(), Identifier(exec, "screenLeft"), value);
}


void setJSDOMWindowScreenTop(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    // Shadowing a built-in object
    castedThis->putDirect(exec->vm(), Identifier(exec, "screenTop"), value);
}


void setJSDOMWindowScrollX(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    // Shadowing a built-in object
    castedThis->putDirect(exec->vm(), Identifier(exec, "scrollX"), value);
}


void setJSDOMWindowScrollY(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    // Shadowing a built-in object
    castedThis->putDirect(exec->vm(), Identifier(exec, "scrollY"), value);
}


void setJSDOMWindowLength(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    // Shadowing a built-in object
    castedThis->putDirect(exec->vm(), Identifier(exec, "length"), value);
}


void setJSDOMWindowName(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    DOMWindow& impl = castedThis->impl();
    const String& nativeValue(value.isEmpty() ? String() : value.toString(exec)->value(exec));
    if (exec->hadException())
        return;
    impl.setName(nativeValue);
}


void setJSDOMWindowStatus(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    DOMWindow& impl = castedThis->impl();
    const String& nativeValue(value.isEmpty() ? String() : value.toString(exec)->value(exec));
    if (exec->hadException())
        return;
    impl.setStatus(nativeValue);
}


void setJSDOMWindowDefaultStatus(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    DOMWindow& impl = castedThis->impl();
    const String& nativeValue(value.isEmpty() ? String() : value.toString(exec)->value(exec));
    if (exec->hadException())
        return;
    impl.setDefaultStatus(nativeValue);
}


void setJSDOMWindowDefaultstatus(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    DOMWindow& impl = castedThis->impl();
    const String& nativeValue(value.isEmpty() ? String() : value.toString(exec)->value(exec));
    if (exec->hadException())
        return;
    impl.setDefaultStatus(nativeValue);
}


void setJSDOMWindowSelf(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    // Shadowing a built-in object
    castedThis->putDirect(exec->vm(), Identifier(exec, "self"), value);
}


void setJSDOMWindowFrames(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    // Shadowing a built-in object
    castedThis->putDirect(exec->vm(), Identifier(exec, "frames"), value);
}


void setJSDOMWindowOpener(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    // Shadowing a built-in object
    castedThis->putDirect(exec->vm(), Identifier(exec, "opener"), value);
}


void setJSDOMWindowParent(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    // Shadowing a built-in object
    castedThis->putDirect(exec->vm(), Identifier(exec, "parent"), value);
}


void setJSDOMWindowDevicePixelRatio(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    // Shadowing a built-in object
    castedThis->putDirect(exec->vm(), Identifier(exec, "devicePixelRatio"), value);
}


void setJSDOMWindowConsole(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    // Shadowing a built-in object
    castedThis->putDirect(exec->vm(), Identifier(exec, "console"), value);
}


#if ENABLE(CSS3_CONDITIONAL_RULES)
void setJSDOMWindowCSS(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    // Shadowing a built-in object
    castedThis->putDirect(exec->vm(), Identifier(exec, "CSS"), value);
}

#endif

void setJSDOMWindowOnabort(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOnabort(createJSAttributeEventListener(exec, value, castedThis));
}


void setJSDOMWindowOnbeforeunload(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOnbeforeunload(createJSAttributeEventListener(exec, value, castedThis));
}


void setJSDOMWindowOnblur(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOnblur(createJSAttributeEventListener(exec, value, castedThis));
}


void setJSDOMWindowOncanplay(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOncanplay(createJSAttributeEventListener(exec, value, castedThis));
}


void setJSDOMWindowOncanplaythrough(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOncanplaythrough(createJSAttributeEventListener(exec, value, castedThis));
}


void setJSDOMWindowOnchange(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOnchange(createJSAttributeEventListener(exec, value, castedThis));
}


void setJSDOMWindowOnclick(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOnclick(createJSAttributeEventListener(exec, value, castedThis));
}


void setJSDOMWindowOncontextmenu(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOncontextmenu(createJSAttributeEventListener(exec, value, castedThis));
}


void setJSDOMWindowOndblclick(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOndblclick(createJSAttributeEventListener(exec, value, castedThis));
}


void setJSDOMWindowOndrag(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOndrag(createJSAttributeEventListener(exec, value, castedThis));
}


void setJSDOMWindowOndragend(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOndragend(createJSAttributeEventListener(exec, value, castedThis));
}


void setJSDOMWindowOndragenter(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOndragenter(createJSAttributeEventListener(exec, value, castedThis));
}


void setJSDOMWindowOndragleave(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOndragleave(createJSAttributeEventListener(exec, value, castedThis));
}


void setJSDOMWindowOndragover(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOndragover(createJSAttributeEventListener(exec, value, castedThis));
}


void setJSDOMWindowOndragstart(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOndragstart(createJSAttributeEventListener(exec, value, castedThis));
}


void setJSDOMWindowOndrop(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOndrop(createJSAttributeEventListener(exec, value, castedThis));
}


void setJSDOMWindowOndurationchange(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOndurationchange(createJSAttributeEventListener(exec, value, castedThis));
}


void setJSDOMWindowOnemptied(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOnemptied(createJSAttributeEventListener(exec, value, castedThis));
}


void setJSDOMWindowOnended(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOnended(createJSAttributeEventListener(exec, value, castedThis));
}


void setJSDOMWindowOnerror(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOnerror(createJSErrorHandler(exec, value, castedThis));
}


void setJSDOMWindowOnfocus(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOnfocus(createJSAttributeEventListener(exec, value, castedThis));
}


void setJSDOMWindowOnhashchange(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOnhashchange(createJSAttributeEventListener(exec, value, castedThis));
}


void setJSDOMWindowOninput(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOninput(createJSAttributeEventListener(exec, value, castedThis));
}


void setJSDOMWindowOninvalid(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOninvalid(createJSAttributeEventListener(exec, value, castedThis));
}


void setJSDOMWindowOnkeydown(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOnkeydown(createJSAttributeEventListener(exec, value, castedThis));
}


void setJSDOMWindowOnkeypress(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOnkeypress(createJSAttributeEventListener(exec, value, castedThis));
}


void setJSDOMWindowOnkeyup(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOnkeyup(createJSAttributeEventListener(exec, value, castedThis));
}


void setJSDOMWindowOnload(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOnload(createJSAttributeEventListener(exec, value, castedThis));
}


void setJSDOMWindowOnloadeddata(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOnloadeddata(createJSAttributeEventListener(exec, value, castedThis));
}


void setJSDOMWindowOnloadedmetadata(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOnloadedmetadata(createJSAttributeEventListener(exec, value, castedThis));
}


void setJSDOMWindowOnloadstart(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOnloadstart(createJSAttributeEventListener(exec, value, castedThis));
}


void setJSDOMWindowOnmessage(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOnmessage(createJSAttributeEventListener(exec, value, castedThis));
}


void setJSDOMWindowOnmousedown(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOnmousedown(createJSAttributeEventListener(exec, value, castedThis));
}


void setJSDOMWindowOnmouseenter(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOnmouseenter(createJSAttributeEventListener(exec, value, castedThis));
}


void setJSDOMWindowOnmouseleave(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOnmouseleave(createJSAttributeEventListener(exec, value, castedThis));
}


void setJSDOMWindowOnmousemove(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOnmousemove(createJSAttributeEventListener(exec, value, castedThis));
}


void setJSDOMWindowOnmouseout(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOnmouseout(createJSAttributeEventListener(exec, value, castedThis));
}


void setJSDOMWindowOnmouseover(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOnmouseover(createJSAttributeEventListener(exec, value, castedThis));
}


void setJSDOMWindowOnmouseup(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOnmouseup(createJSAttributeEventListener(exec, value, castedThis));
}


void setJSDOMWindowOnmousewheel(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOnmousewheel(createJSAttributeEventListener(exec, value, castedThis));
}


void setJSDOMWindowOnoffline(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOnoffline(createJSAttributeEventListener(exec, value, castedThis));
}


void setJSDOMWindowOnonline(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOnonline(createJSAttributeEventListener(exec, value, castedThis));
}


void setJSDOMWindowOnpagehide(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOnpagehide(createJSAttributeEventListener(exec, value, castedThis));
}


void setJSDOMWindowOnpageshow(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOnpageshow(createJSAttributeEventListener(exec, value, castedThis));
}


void setJSDOMWindowOnpause(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOnpause(createJSAttributeEventListener(exec, value, castedThis));
}


void setJSDOMWindowOnplay(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOnplay(createJSAttributeEventListener(exec, value, castedThis));
}


void setJSDOMWindowOnplaying(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOnplaying(createJSAttributeEventListener(exec, value, castedThis));
}


void setJSDOMWindowOnpopstate(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOnpopstate(createJSAttributeEventListener(exec, value, castedThis));
}


void setJSDOMWindowOnprogress(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOnprogress(createJSAttributeEventListener(exec, value, castedThis));
}


void setJSDOMWindowOnratechange(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOnratechange(createJSAttributeEventListener(exec, value, castedThis));
}


void setJSDOMWindowOnresize(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOnresize(createJSAttributeEventListener(exec, value, castedThis));
}


void setJSDOMWindowOnscroll(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOnscroll(createJSAttributeEventListener(exec, value, castedThis));
}


void setJSDOMWindowOnseeked(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOnseeked(createJSAttributeEventListener(exec, value, castedThis));
}


void setJSDOMWindowOnseeking(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOnseeking(createJSAttributeEventListener(exec, value, castedThis));
}


void setJSDOMWindowOnselect(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOnselect(createJSAttributeEventListener(exec, value, castedThis));
}


void setJSDOMWindowOnstalled(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOnstalled(createJSAttributeEventListener(exec, value, castedThis));
}


void setJSDOMWindowOnstorage(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOnstorage(createJSAttributeEventListener(exec, value, castedThis));
}


void setJSDOMWindowOnsubmit(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOnsubmit(createJSAttributeEventListener(exec, value, castedThis));
}


void setJSDOMWindowOnsuspend(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOnsuspend(createJSAttributeEventListener(exec, value, castedThis));
}


void setJSDOMWindowOntimeupdate(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOntimeupdate(createJSAttributeEventListener(exec, value, castedThis));
}


void setJSDOMWindowOnunload(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOnunload(createJSAttributeEventListener(exec, value, castedThis));
}


void setJSDOMWindowOnvolumechange(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOnvolumechange(createJSAttributeEventListener(exec, value, castedThis));
}


void setJSDOMWindowOnwaiting(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOnwaiting(createJSAttributeEventListener(exec, value, castedThis));
}


void setJSDOMWindowOnwheel(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOnwheel(createJSAttributeEventListener(exec, value, castedThis));
}


void setJSDOMWindowOnreset(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOnreset(createJSAttributeEventListener(exec, value, castedThis));
}


void setJSDOMWindowOnsearch(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOnsearch(createJSAttributeEventListener(exec, value, castedThis));
}


void setJSDOMWindowOnwebkitanimationend(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOnwebkitanimationend(createJSAttributeEventListener(exec, value, castedThis));
}


void setJSDOMWindowOnwebkitanimationiteration(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOnwebkitanimationiteration(createJSAttributeEventListener(exec, value, castedThis));
}


void setJSDOMWindowOnwebkitanimationstart(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOnwebkitanimationstart(createJSAttributeEventListener(exec, value, castedThis));
}


void setJSDOMWindowOnwebkittransitionend(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOnwebkittransitionend(createJSAttributeEventListener(exec, value, castedThis));
}


void setJSDOMWindowOntransitionend(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOntransitionend(createJSAttributeEventListener(exec, value, castedThis));
}


#if ENABLE(TOUCH_EVENTS)
void setJSDOMWindowOntouchstart(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOntouchstart(createJSAttributeEventListener(exec, value, castedThis));
}

#endif

#if ENABLE(TOUCH_EVENTS)
void setJSDOMWindowOntouchmove(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOntouchmove(createJSAttributeEventListener(exec, value, castedThis));
}

#endif

#if ENABLE(TOUCH_EVENTS)
void setJSDOMWindowOntouchend(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOntouchend(createJSAttributeEventListener(exec, value, castedThis));
}

#endif

#if ENABLE(TOUCH_EVENTS)
void setJSDOMWindowOntouchcancel(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOntouchcancel(createJSAttributeEventListener(exec, value, castedThis));
}

#endif

#if ENABLE(IOS_GESTURE_EVENTS)
void setJSDOMWindowOngesturestart(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOngesturestart(createJSAttributeEventListener(exec, value, castedThis));
}

#endif

#if ENABLE(IOS_GESTURE_EVENTS)
void setJSDOMWindowOngesturechange(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOngesturechange(createJSAttributeEventListener(exec, value, castedThis));
}

#endif

#if ENABLE(IOS_GESTURE_EVENTS)
void setJSDOMWindowOngestureend(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOngestureend(createJSAttributeEventListener(exec, value, castedThis));
}

#endif

#if ENABLE(DEVICE_ORIENTATION)
void setJSDOMWindowOndevicemotion(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOndevicemotion(createJSAttributeEventListener(exec, value, castedThis));
}

#endif

#if ENABLE(DEVICE_ORIENTATION)
void setJSDOMWindowOndeviceorientation(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOndeviceorientation(createJSAttributeEventListener(exec, value, castedThis));
}

#endif

#if ENABLE(PROXIMITY_EVENTS)
void setJSDOMWindowOnwebkitdeviceproximity(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    UNUSED_PARAM(exec);
    DOMWindow& impl = castedThis->impl();
    impl.setOnwebkitdeviceproximity(createJSAttributeEventListener(exec, value, castedThis));
}

#endif

void setJSDOMWindowImageConstructor(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    // Shadowing a built-in constructor
    castedThis->putDirect(exec->vm(), Identifier(exec, "Image"), value);
}


void setJSDOMWindowXMLDocumentConstructor(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    // Shadowing a built-in constructor
    castedThis->putDirect(exec->vm(), Identifier(exec, "XMLDocument"), value);
}


#if ENABLE(IOS_TOUCH_EVENTS)
void setJSDOMWindowTouchConstructor(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    // Shadowing a built-in constructor
    castedThis->putDirect(exec->vm(), Identifier(exec, "Touch"), value);
}

#endif

#if ENABLE(IOS_TOUCH_EVENTS)
void setJSDOMWindowTouchListConstructor(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    // Shadowing a built-in constructor
    castedThis->putDirect(exec->vm(), Identifier(exec, "TouchList"), value);
}

#endif

#if ENABLE(BLOB)
void setJSDOMWindowWebkitURLConstructor(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    // Shadowing a built-in constructor
    castedThis->putDirect(exec->vm(), Identifier(exec, "webkitURL"), value);
}

#endif

void setJSDOMWindowWebKitMutationObserverConstructor(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    // Shadowing a built-in constructor
    castedThis->putDirect(exec->vm(), Identifier(exec, "WebKitMutationObserver"), value);
}


#if ENABLE(INDEXED_DATABASE)
void setJSDOMWindowWebkitIDBCursorConstructor(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    // Shadowing a built-in constructor
    castedThis->putDirect(exec->vm(), Identifier(exec, "webkitIDBCursor"), value);
}

#endif

#if ENABLE(INDEXED_DATABASE)
void setJSDOMWindowWebkitIDBDatabaseConstructor(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    // Shadowing a built-in constructor
    castedThis->putDirect(exec->vm(), Identifier(exec, "webkitIDBDatabase"), value);
}

#endif

#if ENABLE(INDEXED_DATABASE)
void setJSDOMWindowWebkitIDBFactoryConstructor(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    // Shadowing a built-in constructor
    castedThis->putDirect(exec->vm(), Identifier(exec, "webkitIDBFactory"), value);
}

#endif

#if ENABLE(INDEXED_DATABASE)
void setJSDOMWindowWebkitIDBIndexConstructor(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    // Shadowing a built-in constructor
    castedThis->putDirect(exec->vm(), Identifier(exec, "webkitIDBIndex"), value);
}

#endif

#if ENABLE(INDEXED_DATABASE)
void setJSDOMWindowWebkitIDBKeyRangeConstructor(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    // Shadowing a built-in constructor
    castedThis->putDirect(exec->vm(), Identifier(exec, "webkitIDBKeyRange"), value);
}

#endif

#if ENABLE(INDEXED_DATABASE)
void setJSDOMWindowWebkitIDBObjectStoreConstructor(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    // Shadowing a built-in constructor
    castedThis->putDirect(exec->vm(), Identifier(exec, "webkitIDBObjectStore"), value);
}

#endif

#if ENABLE(INDEXED_DATABASE)
void setJSDOMWindowWebkitIDBRequestConstructor(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    // Shadowing a built-in constructor
    castedThis->putDirect(exec->vm(), Identifier(exec, "webkitIDBRequest"), value);
}

#endif

#if ENABLE(INDEXED_DATABASE)
void setJSDOMWindowWebkitIDBTransactionConstructor(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);
    UNUSED_PARAM(exec);
    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    // Shadowing a built-in constructor
    castedThis->putDirect(exec->vm(), Identifier(exec, "webkitIDBTransaction"), value);
}

#endif

void setJSDOMWindowConstructor(ExecState* exec, EncodedJSValue thisValue, EncodedJSValue encodedValue)
{
    JSValue value = JSValue::decode(encodedValue);    JSDOMWindow* castedThis = jsDynamicCast<JSDOMWindow*>(JSValue::decode(thisValue));
    if (!castedThis) {
        if (JSDOMWindowShell* shell = jsDynamicCast<JSDOMWindowShell*>(JSValue::decode(thisValue)))
            castedThis = shell->window();
    }
    if (!castedThis) {
        throwVMTypeError(exec);
        return;
    }
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return;
    // Shadowing a built-in constructor
    castedThis->putDirect(exec->vm(), exec->propertyNames().constructor, value);
}

JSValue JSDOMWindow::getConstructor(VM& vm, JSGlobalObject* globalObject)
{
    return getDOMConstructor<JSDOMWindowConstructor>(vm, jsCast<JSDOMGlobalObject*>(globalObject));
}

EncodedJSValue JSC_HOST_CALL jsDOMWindowPrototypeFunctionGetSelection(ExecState* exec)
{
    JSDOMWindow* castedThis = toJSDOMWindow(exec->hostThisValue().toThis(exec, NotStrictMode));
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDOMWindow::info());
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    DOMWindow& impl = castedThis->impl();

    JSC::JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.getSelection()));
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsDOMWindowPrototypeFunctionFocus(ExecState* exec)
{
    JSDOMWindow* castedThis = toJSDOMWindow(exec->hostThisValue().toThis(exec, NotStrictMode));
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDOMWindow::info());
    DOMWindow& impl = castedThis->impl();
    ScriptExecutionContext* scriptContext = jsCast<JSDOMGlobalObject*>(exec->lexicalGlobalObject())->scriptExecutionContext();
    if (!scriptContext)
        return JSValue::encode(jsUndefined());
    impl.focus(scriptContext);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsDOMWindowPrototypeFunctionBlur(ExecState* exec)
{
    JSDOMWindow* castedThis = toJSDOMWindow(exec->hostThisValue().toThis(exec, NotStrictMode));
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDOMWindow::info());
    DOMWindow& impl = castedThis->impl();
    impl.blur();
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsDOMWindowPrototypeFunctionClose(ExecState* exec)
{
    JSDOMWindow* castedThis = toJSDOMWindow(exec->hostThisValue().toThis(exec, NotStrictMode));
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDOMWindow::info());
    DOMWindow& impl = castedThis->impl();
    ScriptExecutionContext* scriptContext = jsCast<JSDOMGlobalObject*>(exec->lexicalGlobalObject())->scriptExecutionContext();
    if (!scriptContext)
        return JSValue::encode(jsUndefined());
    impl.close(scriptContext);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsDOMWindowPrototypeFunctionPrint(ExecState* exec)
{
    JSDOMWindow* castedThis = toJSDOMWindow(exec->hostThisValue().toThis(exec, NotStrictMode));
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDOMWindow::info());
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    DOMWindow& impl = castedThis->impl();
    impl.print();
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsDOMWindowPrototypeFunctionStop(ExecState* exec)
{
    JSDOMWindow* castedThis = toJSDOMWindow(exec->hostThisValue().toThis(exec, NotStrictMode));
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDOMWindow::info());
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    DOMWindow& impl = castedThis->impl();
    impl.stop();
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsDOMWindowPrototypeFunctionOpen(ExecState* exec)
{
    JSDOMWindow* castedThis = toJSDOMWindow(exec->hostThisValue().toThis(exec, NotStrictMode));
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDOMWindow::info());
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    return JSValue::encode(castedThis->open(exec));
}

EncodedJSValue JSC_HOST_CALL jsDOMWindowPrototypeFunctionShowModalDialog(ExecState* exec)
{
    JSDOMWindow* castedThis = toJSDOMWindow(exec->hostThisValue().toThis(exec, NotStrictMode));
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDOMWindow::info());
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    return JSValue::encode(castedThis->showModalDialog(exec));
}

EncodedJSValue JSC_HOST_CALL jsDOMWindowPrototypeFunctionAlert(ExecState* exec)
{
    JSDOMWindow* castedThis = toJSDOMWindow(exec->hostThisValue().toThis(exec, NotStrictMode));
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDOMWindow::info());
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    DOMWindow& impl = castedThis->impl();
    const String& message(exec->argument(0).isEmpty() ? String() : exec->argument(0).toString(exec)->value(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.alert(message);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsDOMWindowPrototypeFunctionConfirm(ExecState* exec)
{
    JSDOMWindow* castedThis = toJSDOMWindow(exec->hostThisValue().toThis(exec, NotStrictMode));
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDOMWindow::info());
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    DOMWindow& impl = castedThis->impl();
    const String& message(exec->argument(0).isEmpty() ? String() : exec->argument(0).toString(exec)->value(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    JSC::JSValue result = jsBoolean(impl.confirm(message));
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsDOMWindowPrototypeFunctionPrompt(ExecState* exec)
{
    JSDOMWindow* castedThis = toJSDOMWindow(exec->hostThisValue().toThis(exec, NotStrictMode));
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDOMWindow::info());
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    DOMWindow& impl = castedThis->impl();
    const String& message(exec->argument(0).isEmpty() ? String() : exec->argument(0).toString(exec)->value(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    const String& defaultValue(valueToStringWithUndefinedOrNullCheck(exec, exec->argument(1)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    JSC::JSValue result = jsStringOrNull(exec, impl.prompt(message, defaultValue));
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsDOMWindowPrototypeFunctionFind(ExecState* exec)
{
    JSDOMWindow* castedThis = toJSDOMWindow(exec->hostThisValue().toThis(exec, NotStrictMode));
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDOMWindow::info());
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    DOMWindow& impl = castedThis->impl();
    const String& string(exec->argument(0).isEmpty() ? String() : exec->argument(0).toString(exec)->value(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    bool caseSensitive(exec->argument(1).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    bool backwards(exec->argument(2).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    bool wrap(exec->argument(3).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    bool wholeWord(exec->argument(4).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    bool searchInFrames(exec->argument(5).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    bool showDialog(exec->argument(6).toBoolean(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    JSC::JSValue result = jsBoolean(impl.find(string, caseSensitive, backwards, wrap, wholeWord, searchInFrames, showDialog));
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsDOMWindowPrototypeFunctionScrollBy(ExecState* exec)
{
    JSDOMWindow* castedThis = toJSDOMWindow(exec->hostThisValue().toThis(exec, NotStrictMode));
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDOMWindow::info());
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    DOMWindow& impl = castedThis->impl();
    int x(toInt32(exec, exec->argument(0), NormalConversion));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    int y(toInt32(exec, exec->argument(1), NormalConversion));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.scrollBy(x, y);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsDOMWindowPrototypeFunctionScrollTo(ExecState* exec)
{
    JSDOMWindow* castedThis = toJSDOMWindow(exec->hostThisValue().toThis(exec, NotStrictMode));
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDOMWindow::info());
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    DOMWindow& impl = castedThis->impl();
    int x(toInt32(exec, exec->argument(0), NormalConversion));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    int y(toInt32(exec, exec->argument(1), NormalConversion));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.scrollTo(x, y);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsDOMWindowPrototypeFunctionScroll(ExecState* exec)
{
    JSDOMWindow* castedThis = toJSDOMWindow(exec->hostThisValue().toThis(exec, NotStrictMode));
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDOMWindow::info());
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    DOMWindow& impl = castedThis->impl();
    int x(toInt32(exec, exec->argument(0), NormalConversion));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    int y(toInt32(exec, exec->argument(1), NormalConversion));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.scroll(x, y);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsDOMWindowPrototypeFunctionMoveBy(ExecState* exec)
{
    JSDOMWindow* castedThis = toJSDOMWindow(exec->hostThisValue().toThis(exec, NotStrictMode));
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDOMWindow::info());
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    DOMWindow& impl = castedThis->impl();
    float x(exec->argument(0).toFloat(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    float y(exec->argument(1).toFloat(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.moveBy(x, y);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsDOMWindowPrototypeFunctionMoveTo(ExecState* exec)
{
    JSDOMWindow* castedThis = toJSDOMWindow(exec->hostThisValue().toThis(exec, NotStrictMode));
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDOMWindow::info());
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    DOMWindow& impl = castedThis->impl();
    float x(exec->argument(0).toFloat(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    float y(exec->argument(1).toFloat(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.moveTo(x, y);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsDOMWindowPrototypeFunctionResizeBy(ExecState* exec)
{
    JSDOMWindow* castedThis = toJSDOMWindow(exec->hostThisValue().toThis(exec, NotStrictMode));
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDOMWindow::info());
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    DOMWindow& impl = castedThis->impl();
    float x(exec->argument(0).toFloat(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    float y(exec->argument(1).toFloat(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.resizeBy(x, y);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsDOMWindowPrototypeFunctionResizeTo(ExecState* exec)
{
    JSDOMWindow* castedThis = toJSDOMWindow(exec->hostThisValue().toThis(exec, NotStrictMode));
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDOMWindow::info());
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    DOMWindow& impl = castedThis->impl();
    float width(exec->argument(0).toFloat(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    float height(exec->argument(1).toFloat(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.resizeTo(width, height);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsDOMWindowPrototypeFunctionMatchMedia(ExecState* exec)
{
    JSDOMWindow* castedThis = toJSDOMWindow(exec->hostThisValue().toThis(exec, NotStrictMode));
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDOMWindow::info());
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    DOMWindow& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    const String& query(exec->argument(0).isEmpty() ? String() : exec->argument(0).toString(exec)->value(exec));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    JSC::JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.matchMedia(query)));
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsDOMWindowPrototypeFunctionGetComputedStyle(ExecState* exec)
{
    JSDOMWindow* castedThis = toJSDOMWindow(exec->hostThisValue().toThis(exec, NotStrictMode));
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDOMWindow::info());
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    DOMWindow& impl = castedThis->impl();
    Element* element(toElement(exec->argument(0)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    const String& pseudoElement(valueToStringWithUndefinedOrNullCheck(exec, exec->argument(1)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    JSC::JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.getComputedStyle(element, pseudoElement)));
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsDOMWindowPrototypeFunctionGetMatchedCSSRules(ExecState* exec)
{
    JSDOMWindow* castedThis = toJSDOMWindow(exec->hostThisValue().toThis(exec, NotStrictMode));
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDOMWindow::info());
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    DOMWindow& impl = castedThis->impl();
    Element* element(toElement(exec->argument(0)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    const String& pseudoElement(valueToStringWithUndefinedOrNullCheck(exec, exec->argument(1)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    JSC::JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.getMatchedCSSRules(element, pseudoElement)));
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsDOMWindowPrototypeFunctionWebkitConvertPointFromPageToNode(ExecState* exec)
{
    JSDOMWindow* castedThis = toJSDOMWindow(exec->hostThisValue().toThis(exec, NotStrictMode));
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDOMWindow::info());
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    DOMWindow& impl = castedThis->impl();
    Node* node(toNode(exec->argument(0)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    WebKitPoint* p(toWebKitPoint(exec->argument(1)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    JSC::JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.webkitConvertPointFromPageToNode(node, p)));
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsDOMWindowPrototypeFunctionWebkitConvertPointFromNodeToPage(ExecState* exec)
{
    JSDOMWindow* castedThis = toJSDOMWindow(exec->hostThisValue().toThis(exec, NotStrictMode));
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDOMWindow::info());
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    DOMWindow& impl = castedThis->impl();
    Node* node(toNode(exec->argument(0)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    WebKitPoint* p(toWebKitPoint(exec->argument(1)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    JSC::JSValue result = toJS(exec, castedThis->globalObject(), WTF::getPtr(impl.webkitConvertPointFromNodeToPage(node, p)));
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsDOMWindowPrototypeFunctionPostMessage(ExecState* exec)
{
    JSDOMWindow* castedThis = toJSDOMWindow(exec->hostThisValue().toThis(exec, NotStrictMode));
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDOMWindow::info());
    return JSValue::encode(castedThis->postMessage(exec));
}

EncodedJSValue JSC_HOST_CALL jsDOMWindowPrototypeFunctionRequestAnimationFrame(ExecState* exec)
{
    JSDOMWindow* castedThis = toJSDOMWindow(exec->hostThisValue().toThis(exec, NotStrictMode));
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDOMWindow::info());
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    DOMWindow& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    if (!exec->argument(0).isFunction())
        return throwVMTypeError(exec);
    RefPtr<RequestAnimationFrameCallback> callback = JSRequestAnimationFrameCallback::create(asObject(exec->uncheckedArgument(0)), castedThis->globalObject());

    JSC::JSValue result = jsNumber(impl.requestAnimationFrame(callback));
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsDOMWindowPrototypeFunctionCancelAnimationFrame(ExecState* exec)
{
    JSDOMWindow* castedThis = toJSDOMWindow(exec->hostThisValue().toThis(exec, NotStrictMode));
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDOMWindow::info());
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    DOMWindow& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    int id(toInt32(exec, exec->argument(0), NormalConversion));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.cancelAnimationFrame(id);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsDOMWindowPrototypeFunctionWebkitRequestAnimationFrame(ExecState* exec)
{
    JSDOMWindow* castedThis = toJSDOMWindow(exec->hostThisValue().toThis(exec, NotStrictMode));
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDOMWindow::info());
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    DOMWindow& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    if (!exec->argument(0).isFunction())
        return throwVMTypeError(exec);
    RefPtr<RequestAnimationFrameCallback> callback = JSRequestAnimationFrameCallback::create(asObject(exec->uncheckedArgument(0)), castedThis->globalObject());

    JSC::JSValue result = jsNumber(impl.webkitRequestAnimationFrame(callback));
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsDOMWindowPrototypeFunctionWebkitCancelAnimationFrame(ExecState* exec)
{
    JSDOMWindow* castedThis = toJSDOMWindow(exec->hostThisValue().toThis(exec, NotStrictMode));
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDOMWindow::info());
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    DOMWindow& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    int id(toInt32(exec, exec->argument(0), NormalConversion));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.cancelAnimationFrame(id);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsDOMWindowPrototypeFunctionWebkitCancelRequestAnimationFrame(ExecState* exec)
{
    JSDOMWindow* castedThis = toJSDOMWindow(exec->hostThisValue().toThis(exec, NotStrictMode));
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDOMWindow::info());
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    DOMWindow& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    int id(toInt32(exec, exec->argument(0), NormalConversion));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());
    impl.cancelAnimationFrame(id);
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsDOMWindowPrototypeFunctionAddEventListener(ExecState* exec)
{
    JSDOMWindow* castedThis = toJSDOMWindow(exec->hostThisValue().toThis(exec, NotStrictMode));
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDOMWindow::info());
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    return JSValue::encode(castedThis->addEventListener(exec));
}

EncodedJSValue JSC_HOST_CALL jsDOMWindowPrototypeFunctionRemoveEventListener(ExecState* exec)
{
    JSDOMWindow* castedThis = toJSDOMWindow(exec->hostThisValue().toThis(exec, NotStrictMode));
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDOMWindow::info());
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    return JSValue::encode(castedThis->removeEventListener(exec));
}

EncodedJSValue JSC_HOST_CALL jsDOMWindowPrototypeFunctionDispatchEvent(ExecState* exec)
{
    JSDOMWindow* castedThis = toJSDOMWindow(exec->hostThisValue().toThis(exec, NotStrictMode));
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDOMWindow::info());
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    DOMWindow& impl = castedThis->impl();
    if (exec->argumentCount() < 1)
        return throwVMError(exec, createNotEnoughArgumentsError(exec));
    ExceptionCode ec = 0;
    Event* evt(toEvent(exec->argument(0)));
    if (exec->hadException())
        return JSValue::encode(jsUndefined());

    JSC::JSValue result = jsBoolean(impl.dispatchEvent(evt, ec));
    setDOMException(exec, ec);
    return JSValue::encode(result);
}

EncodedJSValue JSC_HOST_CALL jsDOMWindowPrototypeFunctionCaptureEvents(ExecState* exec)
{
    JSDOMWindow* castedThis = toJSDOMWindow(exec->hostThisValue().toThis(exec, NotStrictMode));
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDOMWindow::info());
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    DOMWindow& impl = castedThis->impl();
    impl.captureEvents();
    return JSValue::encode(jsUndefined());
}

EncodedJSValue JSC_HOST_CALL jsDOMWindowPrototypeFunctionReleaseEvents(ExecState* exec)
{
    JSDOMWindow* castedThis = toJSDOMWindow(exec->hostThisValue().toThis(exec, NotStrictMode));
    if (!castedThis)
        return throwVMTypeError(exec);
    ASSERT_GC_OBJECT_INHERITS(castedThis, JSDOMWindow::info());
    if (!BindingSecurity::shouldAllowAccessToDOMWindow(exec, castedThis->impl()))
        return JSValue::encode(jsUndefined());
    DOMWindow& impl = castedThis->impl();
    impl.releaseEvents();
    return JSValue::encode(jsUndefined());
}


}
